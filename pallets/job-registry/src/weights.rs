//! Autogenerated weights for pallet_job_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_job_registry.
pub trait WeightInfo {
    fn submit_job() -> Weight;
    fn update_job_status() -> Weight;
    fn remove_job() -> Weight;
}

/// Default weights.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn submit_job() -> Weight {
        Weight::from_parts(50_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }

    fn update_job_status() -> Weight {
        Weight::from_parts(30_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }

    fn remove_job() -> Weight {
        Weight::from_parts(40_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}

// For tests
impl WeightInfo for () {
    fn submit_job() -> Weight {
        Weight::from_parts(50_000_000, 0)
    }

    fn update_job_status() -> Weight {
        Weight::from_parts(30_000_000, 0)
    }

    fn remove_job() -> Weight {
        Weight::from_parts(40_000_000, 0)
    }
}
